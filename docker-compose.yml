services:
  postgres-container:
    image: postgres:17-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - monitoring-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
  postgres-migrations:
    restart: "no"
    build:
      context: ./backend/migrations
    environment:
      GOOSE_DRIVER: postgres
      GOOSE_DBSTRING: ${DATABASE_URL}
    command: ["up"]
    networks:
      - monitoring-net
    depends_on:
      postgres-container:
        condition: service_healthy
  backend:
    build:
      context: ./backend
    environment:
      POSTGRES_URL: ${DATABASE_URL}
    ports:
      - "8082:8082"
    depends_on:
      postgres-migrations:
        condition: service_completed_successfully
    networks:
      - monitoring-net

  frontend:
    build:
      context: ./frontend
      args:
        ORIGIN: http://localhost:8081
        BACKEND_URL: http://backend:8082
    ports:
      - "8081:3000"
    depends_on:
      - backend
    networks:
      - monitoring-net

  pinger:
    build:
      context: ./pinger
    environment:
      BACKEND_URL: http://backend:8082
      WORKERS: ${WORKERS}
      SCRAPE_INTERVAL_SEC: ${SCRAPE_INTERVAL_SEC}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    cap_add:
      - NET_RAW
    depends_on:
      - backend
    networks:
      - monitoring-net

networks:
  monitoring-net:

volumes:
  postgres_data:
